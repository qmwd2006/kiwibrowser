# Build APKs for Kiwi Browser
name: automatic build of apk

# Controls when the action will run. Triggers the workflow on push or pull request events
on:
  workflow_dispatch:
  #push:
  #  paths-ignore:
  #    - '*.md'
  #    - '*.yml'
  #  branches: [ master ]
  #pull_request:
  #  paths-ignore:
  #    - '*.md'
  #    - '*.yml'
  #  branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  init:
    # The type of runner that the job will run on
    runs-on: ubuntu-18.04
    
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        platform: [arm64]
    
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Creating cache folder on /dev/disk/azure/resource-part1 (SSD)
        run: |
          mkdir -p $HOME/cache
      - name: gen a file in cache
        run: |
          echo hello>$HOME/cache/hello.txt
          tree $HOME/cache/
      - name: tar cache
        run: |
          tar -zcvf $HOME/cache.tar.gz -C $HOME/cache .
          du -sh $HOME/cache.tar.gz
      - name: Uploading binary objects to cache
        uses: actions/upload-artifact@v2
        with:
          name: kiwibrowser-ccache-${{ matrix.platform }}.tar.gz
          path: ~/cache.tar.gz
          retention-days: 2
      - name: rm cache tar
        run: rm -rf $HOME/cache.tar.gz

  build:
    needs: init

    # The type of runner that the job will run on
    runs-on: ubuntu-18.04

    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        platform: [arm64]

    # The GitHub Actions machines have a "slow disk", and a SSD "fast" disk.
    # However, there is not enough space to do all the processing on the SSD.
    
    # We refer to the disks based on their name in /dev/disk
    # /dev/disk/azure/root-part1 is / ("slow disk")
    # /dev/disk/azure/resource-part1 is a 14 GB ephemeral SSD disk mounted in /mnt

    # We store the source-code repository (kiwibrowser/src) on /dev/disk/azure/root-part1
    # We store cache, dependencies and output on /dev/disk/azure/resource-part1 (SSD)

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Initializing build
        run: echo Initializing build for platform ${{ matrix.platform }}

      - name: Reclaiming disk space on / by disabling swap partition
        run: |
          sudo swapoff -av
          sudo rm -f /swapfile

      - name: Reclaiming disk space on / by removing .NET framework
        run: sudo rm -rf /usr/share/dotnet

      - name: Checking-out source-code in $GITHUB_WORKSPACE
        uses: actions/checkout@v2

      - name: Creating secondary disk folder on /dev/disk/azure/resource-part1 (SSD)
        run: |
          sudo mkdir -p /extended_data
          sudo chown -R runner:docker /extended_data
      
      # If you want to use only the SSD, you can use:
      - name: On SSD - Creating symlink on /dev/disk/azure/root-part1 pointing to /dev/disk/azure/resource-part1
        run: |
          sudo ln -s /extended_data /mnt/secondary_disk
          sudo ln -s /mnt/secondary_disk $GITHUB_WORKSPACE/

      # or alternatively, to work on the main partition
      # - name: On HDD - Creating symlink on /dev/disk/azure/root-part1 pointing to /dev/disk/azure/resource-part1
      #  run: |
      #    sudo ln -s /extended_data /mnt/secondary_disk
      #    sudo ln -s /mnt/secondary_disk $GITHUB_WORKSPACE/

      # We cannot checkout outside of $GITHUB_WORKSPACE, but we want to checkout to the SSD
      # so we have a symbolic link $GITHUB_WORKSPACE/secondary_disk/ pointing to the SSD
      # and checkout the code there
      - name: Checking-out CIPD dependencies in /mnt/secondary_disk/.cipd
        uses: actions/checkout@v2
        with:
          repository: kiwibrowser/dependencies
          path: ./secondary_disk/.cipd 

      - name: Linking .cipd in the proper path and copying .gclient and .gclient_entries
        run: |
          ln -s $GITHUB_WORKSPACE/./secondary_disk/.cipd ..
          cp ../.cipd/.gclient ..
          cp ../.cipd/.gclient_entries ..

      - name: Installing rclone
        run: curl https://rclone.org/install.sh | sudo bash -s beta

      - name: Updating APT repository
        run: sudo apt-get update

      - name: Installing Python and OpenJDK
        run: sudo apt-get install -y python openjdk-8-jdk-headless libncurses5 ccache

      - name: Setting-up Java 8 as default Java provider
        run: sudo update-java-alternatives --set java-1.8.0-openjdk-amd64

      - name: Installing system dependencies
        run: |
          sudo bash install-build-deps.sh --no-chromeos-fonts
          build/linux/sysroot_scripts/install-sysroot.py --arch=i386
          build/linux/sysroot_scripts/install-sysroot.py --arch=amd64

      - name: Creating output folder
        run: mkdir -p secondary_disk/out/android_${{ matrix.platform }}

      - name: Generating one-time APK signature key
        run: keytool -genkey -v -keystore keystore.jks -alias dev -keyalg RSA -keysize 2048 -validity 10000 -storepass public_password -keypass public_password -dname "cn=Kiwi Browser (unverified), ou=Actions, o=Kiwi Browser, c=GitHub"

      - name: Copying args.gn to target folder
        run: cat .build/android_arm/args.gn | sed "s#target_cpu = \"arm\"#target_cpu = \"${{ matrix.platform }}\"#" | sed "s#android_default_version_name = \"Git\"#android_default_version_name = \"Git$(date '+%y%m%d')Gen${{ github.run_id }}\"#" > secondary_disk/out/android_${{ matrix.platform }}/args.gn

      - name: Modifying args.gn (arm)
        if: matrix.platform == 'arm'
        run: sed -i "s#android_default_version_code = \"1\"#android_default_version_code = \"$(date '+%y%m%d')1\"#" secondary_disk/out/android_${{ matrix.platform }}/args.gn

      - name: Modifying args.gn (arm64)
        if: matrix.platform == 'arm64'
        run: sed -i "s#android_default_version_code = \"1\"#android_default_version_code = \"$(date '+%y%m%d')2\"#" secondary_disk/out/android_${{ matrix.platform }}/args.gn

      - name: Modifying args.gn (x86)
        if: matrix.platform == 'x86'
        run: sed -i "s#android_default_version_code = \"1\"#android_default_version_code = \"$(date '+%y%m%d')3\"#" secondary_disk/out/android_${{ matrix.platform }}/args.gn

      - name: Modifying args.gn (x64)
        if: matrix.platform == 'x64'
        run: sed -i "s#android_default_version_code = \"1\"#android_default_version_code = \"$(date '+%y%m%d')4\"#" secondary_disk/out/android_${{ matrix.platform }}/args.gn

      - name: Displaying args.gn
        run: cat secondary_disk/out/android_${{ matrix.platform }}/args.gn

      - name: Downloading depot_tools
        working-directory: ./secondary_disk
        run: git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git

      - name: Adding depot_tools to path
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true
        run: echo "::add-path::$GITHUB_WORKSPACE/secondary_disk/depot_tools"

      - name: Setting environment variables
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true
        run: |
          echo "::set-env name=CC::ccache clang -Qunused-arguments"
          echo "::set-env name=CXX::ccache clang++ -Qunused-arguments"

      - name: Checking available disk-space
        run: df -h

      - name: Creating cache folder on /dev/disk/azure/resource-part1 (SSD)
        run: |
          mkdir -p $HOME/cache

      - name: Downloading binary objects cache to $HOME/cache
        uses: actions/download-artifact@v2
        with:
          name: kiwibrowser-ccache-${{ matrix.platform }}.tar.gz
          path: ~/
      - name: untar cache
        run: |
          tar -xzvf $HOME/cache.tar.gz -C $HOME/cache
          rm -rf $HOME/cache.tar.gz

      - name: Checking available disk-space after downloading cache
        run: df -h
        
      - name: Fetching number for the latest stable version of Chromium
        run: curl "https://omahaproxy.appspot.com/all" | grep -Fi "android,stable" | cut -f3 -d"," | awk '{split($0,a,"."); print "MAJOR=" a[1] "\nMINOR=" a[2] "\nBUILD=" a[3] "\nPATCH=" a[4]}' > chrome/VERSION
        
      - name: Calculating cache size
        run: du -csh $HOME/cache

      - name: Creating ccache configuration
        run: |
          mkdir -p $HOME/.ccache/
          echo 'compiler_check = none' >> $HOME/.ccache/ccache.conf
          echo "stats = false" >> $HOME/.ccache/ccache.conf
          echo 'max_size = 20G' >> $HOME/.ccache/ccache.conf
          echo "base_dir = $HOME" >> $HOME/.ccache/ccache.conf
          echo "cache_dir = $HOME/cache" >> $HOME/.ccache/ccache.conf
          echo "hash_dir = false" >> $HOME/.ccache/ccache.conf

      - name: Running gclient runhooks
        run: |
          gclient config https://github.com/qmwd2006/kiwibrowser
          gclient runhooks
          tree -L 2

      - name: Gen LASTCHANGE
        run: python ./build/util/lastchange.py ./build/util/LASTCHANGE

      - name: Generating build files
        run: gn gen ./secondary_disk/out/android_${{ matrix.platform }}

      - name: Checking available disk-space before build
        run: df -h

      # We compile component by component as 6 hours is not enough for the initial build
      # so we can snapshot between each component and continue further from the snapshot
      - name: Compiling source-code (base)
        run: ninja -C ./secondary_disk/out/android_${{ matrix.platform }} base

      - name: Compiling source-code (chrome_java)
        run: ninja -C ./secondary_disk/out/android_${{ matrix.platform }} chrome_java

      - name: Compiling source-code (v8)
        run: ninja -C ./secondary_disk/out/android_${{ matrix.platform }} v8

      - name: tar cache
        if: always()
        run: |
          tar -zcvf $HOME/cache.tar.gz -C $HOME/cache .
          du -sh $HOME/cache.tar.gz
      - name: Uploading binary objects to cache
        uses: actions/upload-artifact@v2
        with:
          name: kiwibrowser-ccache-${{ matrix.platform }}.tar.gz
          path: ~/cache.tar.gz
          retention-days: 2
      - name: rm cache tar
        run: rm -rf $HOME/cache.tar.gz

  build2:
    needs: build

    # The type of runner that the job will run on
    runs-on: ubuntu-18.04

    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        platform: [arm64]

    # The GitHub Actions machines have a "slow disk", and a SSD "fast" disk.
    # However, there is not enough space to do all the processing on the SSD.
    
    # We refer to the disks based on their name in /dev/disk
    # /dev/disk/azure/root-part1 is / ("slow disk")
    # /dev/disk/azure/resource-part1 is a 14 GB ephemeral SSD disk mounted in /mnt

    # We store the source-code repository (kiwibrowser/src) on /dev/disk/azure/root-part1
    # We store cache, dependencies and output on /dev/disk/azure/resource-part1 (SSD)

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Initializing build
        run: echo Initializing build for platform ${{ matrix.platform }}

      - name: Reclaiming disk space on / by disabling swap partition
        run: |
          sudo swapoff -av
          sudo rm -f /swapfile
      - name: Reclaiming disk space on / by removing .NET framework
        run: sudo rm -rf /usr/share/dotnet

      - name: Checking-out source-code in $GITHUB_WORKSPACE
        uses: actions/checkout@v2

      - name: Creating secondary disk folder on /dev/disk/azure/resource-part1 (SSD)
        run: |
          sudo mkdir -p /extended_data
          sudo chown -R runner:docker /extended_data
      
      # If you want to use only the SSD, you can use:
      - name: On SSD - Creating symlink on /dev/disk/azure/root-part1 pointing to /dev/disk/azure/resource-part1
        run: |
          sudo ln -s /extended_data /mnt/secondary_disk
          sudo ln -s /mnt/secondary_disk $GITHUB_WORKSPACE/
      # or alternatively, to work on the main partition
      # - name: On HDD - Creating symlink on /dev/disk/azure/root-part1 pointing to /dev/disk/azure/resource-part1
      #  run: |
      #    sudo ln -s /extended_data /mnt/secondary_disk
      #    sudo ln -s /mnt/secondary_disk $GITHUB_WORKSPACE/

      # We cannot checkout outside of $GITHUB_WORKSPACE, but we want to checkout to the SSD
      # so we have a symbolic link $GITHUB_WORKSPACE/secondary_disk/ pointing to the SSD
      # and checkout the code there
      - name: Checking-out CIPD dependencies in /mnt/secondary_disk/.cipd
        uses: actions/checkout@v2
        with:
          repository: kiwibrowser/dependencies
          path: ./secondary_disk/.cipd 

      - name: Linking .cipd in the proper path and copying .gclient and .gclient_entries
        run: |
          ln -s $GITHUB_WORKSPACE/./secondary_disk/.cipd ..
          cp ../.cipd/.gclient ..
          cp ../.cipd/.gclient_entries ..
      - name: Installing rclone
        run: curl https://rclone.org/install.sh | sudo bash -s beta

      - name: Updating APT repository
        run: sudo apt-get update

      - name: Installing Python and OpenJDK
        run: sudo apt-get install -y python openjdk-8-jdk-headless libncurses5 ccache

      - name: Setting-up Java 8 as default Java provider
        run: sudo update-java-alternatives --set java-1.8.0-openjdk-amd64

      - name: Installing system dependencies
        run: |
          sudo bash install-build-deps.sh --no-chromeos-fonts
          build/linux/sysroot_scripts/install-sysroot.py --arch=i386
          build/linux/sysroot_scripts/install-sysroot.py --arch=amd64
      - name: Creating output folder
        run: mkdir -p secondary_disk/out/android_${{ matrix.platform }}

      - name: Generating one-time APK signature key
        run: keytool -genkey -v -keystore keystore.jks -alias dev -keyalg RSA -keysize 2048 -validity 10000 -storepass public_password -keypass public_password -dname "cn=Kiwi Browser (unverified), ou=Actions, o=Kiwi Browser, c=GitHub"

      - name: Copying args.gn to target folder
        run: cat .build/android_arm/args.gn | sed "s#target_cpu = \"arm\"#target_cpu = \"${{ matrix.platform }}\"#" | sed "s#android_default_version_name = \"Git\"#android_default_version_name = \"Git$(date '+%y%m%d')Gen${{ github.run_id }}\"#" > secondary_disk/out/android_${{ matrix.platform }}/args.gn

      - name: Modifying args.gn (arm)
        if: matrix.platform == 'arm'
        run: sed -i "s#android_default_version_code = \"1\"#android_default_version_code = \"$(date '+%y%m%d')1\"#" secondary_disk/out/android_${{ matrix.platform }}/args.gn

      - name: Modifying args.gn (arm64)
        if: matrix.platform == 'arm64'
        run: sed -i "s#android_default_version_code = \"1\"#android_default_version_code = \"$(date '+%y%m%d')2\"#" secondary_disk/out/android_${{ matrix.platform }}/args.gn

      - name: Modifying args.gn (x86)
        if: matrix.platform == 'x86'
        run: sed -i "s#android_default_version_code = \"1\"#android_default_version_code = \"$(date '+%y%m%d')3\"#" secondary_disk/out/android_${{ matrix.platform }}/args.gn

      - name: Modifying args.gn (x64)
        if: matrix.platform == 'x64'
        run: sed -i "s#android_default_version_code = \"1\"#android_default_version_code = \"$(date '+%y%m%d')4\"#" secondary_disk/out/android_${{ matrix.platform }}/args.gn

      - name: Displaying args.gn
        run: cat secondary_disk/out/android_${{ matrix.platform }}/args.gn

      - name: Downloading depot_tools
        working-directory: ./secondary_disk
        run: git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git

      - name: Adding depot_tools to path
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true
        run: echo "::add-path::$GITHUB_WORKSPACE/secondary_disk/depot_tools"

      - name: Setting environment variables
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true
        run: |
          echo "::set-env name=CC::ccache clang -Qunused-arguments"
          echo "::set-env name=CXX::ccache clang++ -Qunused-arguments"
      - name: Checking available disk-space
        run: df -h

      - name: Creating cache folder on /dev/disk/azure/resource-part1 (SSD)
        run: |
          mkdir -p $HOME/cache

      - name: Downloading binary objects cache to $HOME/cache
        # run: rclone copy --fast-list --transfers=128 cache:kiwibrowser-ccache-${{ matrix.platform }} $HOME/cache
        uses: actions/download-artifact@v2
        with:
          name: kiwibrowser-ccache-${{ matrix.platform }}.tar.gz
          path: ~/
      - name: untar cache
        run: |
          tar -xzvf $HOME/cache.tar.gz -C $HOME/cache
          rm -rf $HOME/cache.tar.gz
      - name: Checking available disk-space after downloading cache
        run: df -h
        
      - name: Fetching number for the latest stable version of Chromium
        run: curl "https://omahaproxy.appspot.com/all" | grep -Fi "android,stable" | cut -f3 -d"," | awk '{split($0,a,"."); print "MAJOR=" a[1] "\nMINOR=" a[2] "\nBUILD=" a[3] "\nPATCH=" a[4]}' > chrome/VERSION
        
      - name: Calculating cache size
        run: du -csh $HOME/cache

      - name: Creating ccache configuration
        run: |
          mkdir -p $HOME/.ccache/
          echo 'compiler_check = none' >> $HOME/.ccache/ccache.conf
          echo "stats = false" >> $HOME/.ccache/ccache.conf
          echo 'max_size = 20G' >> $HOME/.ccache/ccache.conf
          echo "base_dir = $HOME" >> $HOME/.ccache/ccache.conf
          echo "cache_dir = $HOME/cache" >> $HOME/.ccache/ccache.conf
          echo "hash_dir = false" >> $HOME/.ccache/ccache.conf
      - name: Running gclient runhooks
        run: |
          gclient config https://github.com/qmwd2006/kiwibrowser
          gclient runhooks
          tree -L 2
      - name: Gen LASTCHANGE
        run: python ./build/util/lastchange.py ./build/util/LASTCHANGE

      - name: Generating build files
        run: gn gen ./secondary_disk/out/android_${{ matrix.platform }}

      - name: Checking available disk-space before build
        run: df -h

      # We compile component by component as 6 hours is not enough for the initial build
      # so we can snapshot between each component and continue further from the snapshot
      - name: Compiling source-code (base)
        run: ninja -C ./secondary_disk/out/android_${{ matrix.platform }} base

      - name: Compiling source-code (chrome_java)
        run: ninja -j 4 -C ./secondary_disk/out/android_${{ matrix.platform }} chrome_java

      - name: Compiling source-code (components/guest_view/renderer)
        run: ninja -j 4 -C ./secondary_disk/out/android_${{ matrix.platform }} components/guest_view/renderer

      - name: tar cache
        if: always()
        run: |
          tar -zcvf $HOME/cache.tar.gz -C $HOME/cache .
          du -sh $HOME/cache.tar.gz
      - name: Uploading binary objects to cache
        uses: actions/upload-artifact@v2
        with:
          name: kiwibrowser-ccache-${{ matrix.platform }}.tar.gz
          path: ~/cache.tar.gz
          retention-days: 2
      - name: rm cache tar
        run: rm -rf $HOME/cache.tar.gz

  build3:
    needs: build2

    # The type of runner that the job will run on
    runs-on: ubuntu-18.04

    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        platform: [arm64]

    # The GitHub Actions machines have a "slow disk", and a SSD "fast" disk.
    # However, there is not enough space to do all the processing on the SSD.
    
    # We refer to the disks based on their name in /dev/disk
    # /dev/disk/azure/root-part1 is / ("slow disk")
    # /dev/disk/azure/resource-part1 is a 14 GB ephemeral SSD disk mounted in /mnt

    # We store the source-code repository (kiwibrowser/src) on /dev/disk/azure/root-part1
    # We store cache, dependencies and output on /dev/disk/azure/resource-part1 (SSD)

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Initializing build
        run: echo Initializing build for platform ${{ matrix.platform }}

      - name: Reclaiming disk space on / by disabling swap partition
        run: |
          sudo swapoff -av
          sudo rm -f /swapfile
      - name: Reclaiming disk space on / by removing .NET framework
        run: sudo rm -rf /usr/share/dotnet

      - name: Checking-out source-code in $GITHUB_WORKSPACE
        uses: actions/checkout@v2

      - name: Creating secondary disk folder on /dev/disk/azure/resource-part1 (SSD)
        run: |
          sudo mkdir -p /extended_data
          sudo chown -R runner:docker /extended_data
      
      # If you want to use only the SSD, you can use:
      - name: On SSD - Creating symlink on /dev/disk/azure/root-part1 pointing to /dev/disk/azure/resource-part1
        run: |
          sudo ln -s /extended_data /mnt/secondary_disk
          sudo ln -s /mnt/secondary_disk $GITHUB_WORKSPACE/
      # or alternatively, to work on the main partition
      # - name: On HDD - Creating symlink on /dev/disk/azure/root-part1 pointing to /dev/disk/azure/resource-part1
      #  run: |
      #    sudo ln -s /extended_data /mnt/secondary_disk
      #    sudo ln -s /mnt/secondary_disk $GITHUB_WORKSPACE/

      # We cannot checkout outside of $GITHUB_WORKSPACE, but we want to checkout to the SSD
      # so we have a symbolic link $GITHUB_WORKSPACE/secondary_disk/ pointing to the SSD
      # and checkout the code there
      - name: Checking-out CIPD dependencies in /mnt/secondary_disk/.cipd
        uses: actions/checkout@v2
        with:
          repository: kiwibrowser/dependencies
          path: ./secondary_disk/.cipd 

      - name: Linking .cipd in the proper path and copying .gclient and .gclient_entries
        run: |
          ln -s $GITHUB_WORKSPACE/./secondary_disk/.cipd ..
          cp ../.cipd/.gclient ..
          cp ../.cipd/.gclient_entries ..
      - name: Installing rclone
        run: curl https://rclone.org/install.sh | sudo bash -s beta

      - name: Updating APT repository
        run: sudo apt-get update

      - name: Installing Python and OpenJDK
        run: sudo apt-get install -y python openjdk-8-jdk-headless libncurses5 ccache

      - name: Setting-up Java 8 as default Java provider
        run: sudo update-java-alternatives --set java-1.8.0-openjdk-amd64

      - name: Installing system dependencies
        run: |
          sudo bash install-build-deps.sh --no-chromeos-fonts
          build/linux/sysroot_scripts/install-sysroot.py --arch=i386
          build/linux/sysroot_scripts/install-sysroot.py --arch=amd64
      - name: Creating output folder
        run: mkdir -p secondary_disk/out/android_${{ matrix.platform }}

      - name: Generating one-time APK signature key
        run: keytool -genkey -v -keystore keystore.jks -alias dev -keyalg RSA -keysize 2048 -validity 10000 -storepass public_password -keypass public_password -dname "cn=Kiwi Browser (unverified), ou=Actions, o=Kiwi Browser, c=GitHub"

      - name: Copying args.gn to target folder
        run: cat .build/android_arm/args.gn | sed "s#target_cpu = \"arm\"#target_cpu = \"${{ matrix.platform }}\"#" | sed "s#android_default_version_name = \"Git\"#android_default_version_name = \"Git$(date '+%y%m%d')Gen${{ github.run_id }}\"#" > secondary_disk/out/android_${{ matrix.platform }}/args.gn

      - name: Modifying args.gn (arm)
        if: matrix.platform == 'arm'
        run: sed -i "s#android_default_version_code = \"1\"#android_default_version_code = \"$(date '+%y%m%d')1\"#" secondary_disk/out/android_${{ matrix.platform }}/args.gn

      - name: Modifying args.gn (arm64)
        if: matrix.platform == 'arm64'
        run: sed -i "s#android_default_version_code = \"1\"#android_default_version_code = \"$(date '+%y%m%d')2\"#" secondary_disk/out/android_${{ matrix.platform }}/args.gn

      - name: Modifying args.gn (x86)
        if: matrix.platform == 'x86'
        run: sed -i "s#android_default_version_code = \"1\"#android_default_version_code = \"$(date '+%y%m%d')3\"#" secondary_disk/out/android_${{ matrix.platform }}/args.gn

      - name: Modifying args.gn (x64)
        if: matrix.platform == 'x64'
        run: sed -i "s#android_default_version_code = \"1\"#android_default_version_code = \"$(date '+%y%m%d')4\"#" secondary_disk/out/android_${{ matrix.platform }}/args.gn

      - name: Displaying args.gn
        run: cat secondary_disk/out/android_${{ matrix.platform }}/args.gn

      - name: Downloading depot_tools
        working-directory: ./secondary_disk
        run: git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git

      - name: Adding depot_tools to path
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true
        run: echo "::add-path::$GITHUB_WORKSPACE/secondary_disk/depot_tools"

      - name: Setting environment variables
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true
        run: |
          echo "::set-env name=CC::ccache clang -Qunused-arguments"
          echo "::set-env name=CXX::ccache clang++ -Qunused-arguments"
      - name: Checking available disk-space
        run: df -h

      - name: Creating cache folder on /dev/disk/azure/resource-part1 (SSD)
        run: |
          mkdir -p $HOME/cache

      - name: Downloading binary objects cache to $HOME/cache
        # run: rclone copy --fast-list --transfers=128 cache:kiwibrowser-ccache-${{ matrix.platform }} $HOME/cache
        uses: actions/download-artifact@v2
        with:
          name: kiwibrowser-ccache-${{ matrix.platform }}.tar.gz
          path: ~/
      - name: untar cache
        run: |
          tar -xzvf $HOME/cache.tar.gz -C $HOME/cache
          rm -rf $HOME/cache.tar.gz
      - name: Checking available disk-space after downloading cache
        run: df -h
        
      - name: Fetching number for the latest stable version of Chromium
        run: curl "https://omahaproxy.appspot.com/all" | grep -Fi "android,stable" | cut -f3 -d"," | awk '{split($0,a,"."); print "MAJOR=" a[1] "\nMINOR=" a[2] "\nBUILD=" a[3] "\nPATCH=" a[4]}' > chrome/VERSION
        
      - name: Calculating cache size
        run: du -csh $HOME/cache

      - name: Creating ccache configuration
        run: |
          mkdir -p $HOME/.ccache/
          echo 'compiler_check = none' >> $HOME/.ccache/ccache.conf
          echo "stats = false" >> $HOME/.ccache/ccache.conf
          echo 'max_size = 20G' >> $HOME/.ccache/ccache.conf
          echo "base_dir = $HOME" >> $HOME/.ccache/ccache.conf
          echo "cache_dir = $HOME/cache" >> $HOME/.ccache/ccache.conf
          echo "hash_dir = false" >> $HOME/.ccache/ccache.conf
      - name: Running gclient runhooks
        run: |
          gclient config https://github.com/qmwd2006/kiwibrowser
          gclient runhooks
          tree -L 2
      - name: Gen LASTCHANGE
        run: python ./build/util/lastchange.py ./build/util/LASTCHANGE

      - name: Generating build files
        run: gn gen ./secondary_disk/out/android_${{ matrix.platform }}

      - name: Checking available disk-space before build
        run: df -h

      # We compile component by component as 6 hours is not enough for the initial build
      # so we can snapshot between each component and continue further from the snapshot
      - name: Compiling source-code (base)
        run: ninja -C ./secondary_disk/out/android_${{ matrix.platform }} base

      - name: Compiling source-code (chrome_java)
        run: ninja -C ./secondary_disk/out/android_${{ matrix.platform }} chrome_java

      - name: Compiling source-code (components/guest_view/renderer)
        run: ninja -C ./secondary_disk/out/android_${{ matrix.platform }} components/guest_view/renderer

      - name: Compiling source-code (chrome/gpu)
        run: ninja -C ./secondary_disk/out/android_${{ matrix.platform }} chrome/gpu

      - name: Compiling source-code (components/version_info)
        run: ninja -C ./secondary_disk/out/android_${{ matrix.platform }} components/version_info

      - name: Compiling source-code (ui/base)
        run: ninja -C ./secondary_disk/out/android_${{ matrix.platform }} ui/base

      - name: Compiling source-code (chrome/browser:resources)
        run: ninja -C ./secondary_disk/out/android_${{ matrix.platform }} chrome/browser:resources
  
      - name: Compiling source-code (chrome/browser/ui)
        run: ninja -C ./secondary_disk/out/android_${{ matrix.platform }} chrome/browser/ui

      - name: Compiling source-code (chrome/browser)
        run: ninja -C ./secondary_disk/out/android_${{ matrix.platform }} chrome/browser

      - name: Compiling source-code (chrome/common)
        run: ninja -C ./secondary_disk/out/android_${{ matrix.platform }} chrome/common

      - name: Compiling source-code (chrome/renderer)
        run: ninja -C ./secondary_disk/out/android_${{ matrix.platform }} chrome/renderer

      - name: Compiling source-code (extensions)
        run: ninja -C ./secondary_disk/out/android_${{ matrix.platform }} extensions

      - name: Compiling source-code (services)
        run: ninja -C ./secondary_disk/out/android_${{ matrix.platform }} services

      - name: Compiling source-code (v8)
        run: ninja -C ./secondary_disk/out/android_${{ matrix.platform }} v8

      - name: tar cache
        run: |
          tar -zcvf $HOME/cache.tar.gz -C $HOME/cache .
          du -sh $HOME/cache.tar.gz
      - name: Uploading binary objects to cache
        uses: actions/upload-artifact@v2
        with:
          name: kiwibrowser-ccache-${{ matrix.platform }}.tar.gz
          path: ~/cache.tar.gz
          retention-days: 2
      - name: rm cache tar
        run: rm -rf $HOME/cache.tar.gz

      - name: Checking available disk-space
        run: df -h

      - name: Reclaiming disk space
        run: rm -rf $HOME/cache/*

      - name: Checking available disk-space
        run: df -h

      - name: Checking available memory
        run: free -m

      - name: Listing running processes
        run: ps auxww

      - name: Compiling source-code (final stage)
        run: ninja -C ./secondary_disk/out/android_${{ matrix.platform }} chrome_public_apk

      - name: tar cache
        run: |
          tar -zcvf $HOME/cache.tar.gz -C $HOME/cache .
          du -sh $HOME/cache.tar.gz
      - name: Uploading binary objects to cache
        uses: actions/upload-artifact@v2
        with:
          name: kiwibrowser-ccache-${{ matrix.platform }}.tar.gz
          path: ~/cache.tar.gz
          retention-days: 2
      - name: rm cache tar
        run: rm -rf $HOME/cache.tar.gz

      - name: Generating native symbols mapping
        run: |
          mkdir -p ./secondary_disk/out/lnx64
          echo Copying files...
          cp -v ../.cipd/tools/* ./secondary_disk/out/lnx64/
          echo Listing files...
          ls -la ../.cipd/tools/*
          echo Listing files in target...
          ls -la ./secondary_disk/out/lnx64
          echo Making dump_syms executable...
          chmod +x ./secondary_disk/out/lnx64/dump_syms
          echo Generating breakpad symbols...
          python components/crash/content/tools/generate_breakpad_symbols.py --build-dir=./secondary_disk/out/lnx64 --symbols-dir=/tmp/extracted_symbols/ --binary=./secondary_disk/out/android_${{ matrix.platform }}/lib.unstripped/libchrome.so --clear --verbose
          echo Symbols have been generated.
          echo Compressing symbols...
          tar -czvf ./secondary_disk/out/android_${{ matrix.platform }}/apks/ChromePublic.native.mapping.tar.gz /tmp/extracted_symbols
          echo Compression completed.

      - name: Uploading APK
        uses: actions/upload-artifact@v1
        with:
          name: apk-${{ matrix.platform }}
          path: ./secondary_disk/out/android_${{ matrix.platform }}/apks/

      - name: Listing mapping files
        run: find ./secondary_disk/out/ -name '*.mapping'
